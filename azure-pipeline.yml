name: $(MajorMinor).$(Revision)

trigger:
  batch: true
  branches:
    include:
    - main

pr:
  autoCancel: true
  branches:
    include:
    - main

# output: are parameters used by pipeline.
parameters:
  - name: artifactUploadTargetFolder
    displayName: "Artifactory uploads Target"
    type: string
    default: terraform-provider
  - name: goplugversion
    displayName: "goplugversion"
    type: string
    default: 1.0.0
  - name: pushprovider 
    displayName: "pushprovider"
    type: boolean
    default: true
  - name: signplugin
    displayName: "signplugin"
    type: boolean
    default: true
    
resources:
- repo: self

stages:
# Build terraform providers.
- stage: BuildTestPack
  displayName: 'Build providers and uplload to jfrog'
  pool:
    vmImage: 'windows-latest'

  jobs:
  - job: Build

    steps:
    # output: download repository into the windows machine.
    - checkout: self
      clean: true
      fetchDepth: 1
      persistCredentials: true

    # output: download go version.
    - task: GoTool@0
      inputs:
        version: '1.19.5' 
    
    # output: confirm was installed sucessfully go version.
    - task: CmdLine@2
      displayName: 'Verify GO'
      inputs:
        script: go version

    # output: show libraries installed.
    - task: CmdLine@2
      displayName: 'Install Libraries ENV-GO'
      inputs:
        script: go env 

    # Windows
    
    # build windows amd64 terraform-provider-passwordsafe_xxx.            
    - task: Go@0
      displayName: 'go build windows'
      inputs:
        command: build
        arguments: '-o $(System.DefaultWorkingDirectory)/terraform-provider-passwordsafe_${{ parameters.goplugversion }}'

    # create a folder to save the windows provider to.
    - task: CmdLine@2
      displayName: 'create folder for windows'
      inputs:
        script: mkdir $(System.DefaultWorkingDirectory)\win
    
    # copy the provider to the folder
    - task: CmdLine@2
      displayName: 'copy provider to windows folder'
      inputs:
        script: copy $(System.DefaultWorkingDirectory)\terraform-provider-passwordsafe_${{ parameters.goplugversion }}  $(System.DefaultWorkingDirectory)\win\terraform-provider-passwordsafe_${{ parameters.goplugversion }}

    # zip up the windows provider to be upload.
    - task: ArchiveFiles@2
      displayName: 'zip windows terraform-provider'
      condition: and(succeeded(), eq('${{ parameters.pushprovider }}', 'true'))
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)\win\terraform-provider-passwordsafe_${{ parameters.goplugversion }}
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/win/terraform-provider-windows-amd64.zip'
        replaceExistingArchive: true

    # Linux
       
    # build linux amd64 terraform-provider-passwordsafe_xxx.
    - task: CmdLine@2
      displayName: 'go build linux'
      inputs:
        script: "SET GOOS=linux&& SET GOARCH=amd64&& go build -o $(System.DefaultWorkingDirectory)/terraform-provider-passwordsafe_${{ parameters.goplugversion }}"

    # create a linux folder to copy the provider to.
    - task: CmdLine@2
      displayName: 'create linux folder'
      inputs:
        script: mkdir $(System.DefaultWorkingDirectory)\lin
    
    # copy the linux provider to the folder
    - task: CmdLine@2
      displayName: 'copy provider to linux folder'
      inputs:
        script: copy $(System.DefaultWorkingDirectory)\terraform-provider-passwordsafe_${{ parameters.goplugversion }}  $(System.DefaultWorkingDirectory)\lin\terraform-provider-passwordsafe_${{ parameters.goplugversion }}

    # zip up the linux provider to be uploaded.
    - task: ArchiveFiles@2
      displayName: 'zip linux terraform-provider'
      condition: and(succeeded(), eq('${{ parameters.pushprovider }}', 'true'))
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)\lin\terraform-provider-passwordsafe_${{ parameters.goplugversion }}
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/lin/terraform-provider-linux-amd64.zip'
        replaceExistingArchive: true

    # Mac

    # build mac amd64 terraform-provider-passwordsafe_xxx. 
    - task: CmdLine@2
      displayName: 'go build mac'
      inputs:
        script: "SET GOOS=darwin&& SET GOARCH=amd64&& go build -o $(System.DefaultWorkingDirectory)/terraform-provider-passwordsafe_${{ parameters.goplugversion }}"

    # create a mac folder to copy the provider to.
    - task: CmdLine@2
      displayName: 'create mac folder'
      inputs:
        script: mkdir $(System.DefaultWorkingDirectory)\mac
    
    # copy the mac provider to the folder
    - task: CmdLine@2
      displayName: 'copy provider to mac folder'
      inputs:
        script: copy $(System.DefaultWorkingDirectory)\terraform-provider-passwordsafe_${{ parameters.goplugversion }}  $(System.DefaultWorkingDirectory)\mac\terraform-provider-passwordsafe_${{ parameters.goplugversion }}

    # zip up the mac provider to upload.
    - task: ArchiveFiles@2
      displayName: 'zip mac terraform-provider'
      condition: and(succeeded(), eq('${{ parameters.pushprovider }}', 'true'))
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)\mac\terraform-provider-passwordsafe_${{ parameters.goplugversion }}
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/mac/terraform-provider-mac-amd64.zip'
        replaceExistingArchive: true

    # Upload zipped providers to jfrog
    - task: ArtifactoryGenericUpload@2
      displayName: 'Upload providers'
      condition: and(succeeded(), eq('${{ parameters.pushprovider }}', 'true'))
      inputs:
        artifactoryService: 'ArtifactoryTokenAccess'
        specSource: 'taskConfiguration'
        fileSpec: |
          {
            "files": [
              {
                "pattern": "$(Build.ArtifactStagingDirectory)/win/terraform-provider-windows-amd64.zip",
                "target": "eng-generic-scratch-local/${{ parameters.artifactUploadTargetFolder }}/terraform-provider-$(Build.SourceBranchName)-$(Build.BuildID)/"
              },
              {
                "pattern": "$(Build.ArtifactStagingDirectory)/lin/terraform-provider-linux-amd64.zip",
                "target": "eng-generic-scratch-local/${{ parameters.artifactUploadTargetFolder }}/terraform-provider-$(Build.SourceBranchName)-$(Build.BuildID)/"
              },
              {
                "pattern": "$(Build.ArtifactStagingDirectory)/mac/terraform-provider-mac-amd64.zip",
                "target": "eng-generic-scratch-local/${{ parameters.artifactUploadTargetFolder }}/terraform-provider-$(Build.SourceBranchName)-$(Build.BuildID)/"
              }
            ]
          }
        collectBuildInfo: true
        buildName: '$(Build.DefinitionName)'
        buildNumber: '$(Build.BuildNumber)'
        failNoOp: true
    
  # The providers must be signed on Core-Build because these VMs have a certificate used for signing.
- stage: SignGOPlugin
  displayName: 'Sign the providers'
  pool:
    name: Core-Build-V2
    vmImage: 'windows-latest'

  jobs:
  - job: Build

    steps:
      # create a windows folder to download the provider to.
      - task: CmdLine@2
        displayName: 'create windows folder'
        inputs:
          script: if not exist $(System.DefaultWorkingDirectory)\win mkdir $(System.DefaultWorkingDirectory)\win

      # create a linux folder to download the provider to.
      - task: CmdLine@2
        displayName: 'create linux folder'
        inputs:
          script: if not exist $(System.DefaultWorkingDirectory)\lin mkdir $(System.DefaultWorkingDirectory)\lin

      # create a mac folder to download the provider to.
      - task: CmdLine@2
        displayName: 'create mac folder'
        inputs:
          script: if not exist $(System.DefaultWorkingDirectory)\mac mkdir $(System.DefaultWorkingDirectory)\mac

      # download the zipped providers from jfrog.
      - task: ArtifactoryGenericDownload@3
        displayName: Download providers
        inputs:
          connection: 'ArtifactoryTokenAccess'
          specSource: 'taskConfiguration'
          fileSpec: |
            {
              "files": [
                {
                  "pattern": "eng-generic-scratch-local/${{ parameters.artifactUploadTargetFolder }}/terraform-provider-$(Build.SourceBranchName)-$(Build.BuildID)/terraform-provider-windows-amd64.zip",
                  "flat": "true",
                  "explode": "true",
                  "target": "$(System.DefaultWorkingDirectory)/win/"
                },
                {
                  "pattern": "eng-generic-scratch-local/${{ parameters.artifactUploadTargetFolder }}/terraform-provider-$(Build.SourceBranchName)-$(Build.BuildID)/terraform-provider-linux-amd64.zip",
                  "flat": "true",
                  "explode": "true",
                  "target": "$(System.DefaultWorkingDirectory)/lin/"
                },
                {
                  "pattern": "eng-generic-scratch-local/${{ parameters.artifactUploadTargetFolder }}/terraform-provider-$(Build.SourceBranchName)-$(Build.BuildID)/terraform-provider-mac-amd64.zip",
                  "flat": "true",
                  "explode": "true",
                  "target": "$(System.DefaultWorkingDirectory)/mac/"
                }
              ]
            }
          failNoOp: true

      # sign the windows provider
      - ${{ if eq(parameters.signplugin, true) }}:
        - template: "sign-assemblies.yml"
          parameters:
            fileNames:
              $(System.DefaultWorkingDirectory)\win\terraform-provider-passwordsafe_${{ parameters.goplugversion }}

      # # sign the linux provider
      # - ${{ if eq(parameters.signplugin, true) }}:
      #   - template: "sign-assemblies.yml"
      #     parameters:
      #       fileNames:
      #         $(System.DefaultWorkingDirectory)\lin\terraform-provider-passwordsafe_${{ parameters.goplugversion }}

      # # sign the mac provider
      # - ${{ if eq(parameters.signplugin, true) }}:
      #   - template: "sign-assemblies.yml"
      #     parameters:
      #       fileNames:
      #         $(System.DefaultWorkingDirectory)\mac\terraform-provider-passwordsafe_${{ parameters.goplugversion }}

      # zip the signed windows provider
      - task: ArchiveFiles@2
        displayName: 'zip windows terraform-provider-signed'
        condition: and(succeeded(), eq('${{ parameters.pushprovider }}', 'true'))
        inputs:
          rootFolderOrFile: $(System.DefaultWorkingDirectory)\win\terraform-provider-passwordsafe_${{ parameters.goplugversion }}
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/terraform-provider-windows-amd64-signed.zip'
          replaceExistingArchive: true

      # # zip the signed linux provider
      # - task: ArchiveFiles@2
      #   displayName: 'zip linux terraform-provider-signed'
      #   condition: and(succeeded(), eq('${{ parameters.pushprovider }}', 'true'))
      #   inputs:
      #     rootFolderOrFile: $(System.DefaultWorkingDirectory)\lin\terraform-provider-passwordsafe_${{ parameters.goplugversion }}
      #     includeRootFolder: true
      #     archiveType: 'zip'
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/terraform-provider-linux-amd64-signed.zip'
      #     replaceExistingArchive: true

      # # zip the signed mac provider
      # - task: ArchiveFiles@2
      #   displayName: 'zip mac terraform-provider-signed'
      #   condition: and(succeeded(), eq('${{ parameters.pushprovider }}', 'true'))
      #   inputs:
      #     rootFolderOrFile: $(System.DefaultWorkingDirectory)\mac\terraform-provider-passwordsafe_${{ parameters.goplugversion }}
      #     includeRootFolder: true
      #     archiveType: 'zip'
      #     archiveFile: '$(Build.ArtifactStagingDirectory)/terraform-provider-mac-amd64-signed.zip'
      #     replaceExistingArchive: true
      
      # upload zipped signed providers to jfrog.        
      - task: ArtifactoryGenericUpload@2
        displayName: 'Upload signed providers'
        condition: and(succeeded(), eq('${{ parameters.pushprovider }}', 'true'))
        inputs:
          artifactoryService: 'ArtifactoryTokenAccess'
          specSource: 'taskConfiguration'
          fileSpec: |
            {
              "files": [
                {
                  "pattern": "$(Build.ArtifactStagingDirectory)/terraform-provider-windows-amd64-signed.zip",
                  "target": "eng-generic-scratch-local/${{ parameters.artifactUploadTargetFolder }}/terraform-provider-$(Build.SourceBranchName)-$(Build.BuildID)/"
                }
              ]
            }
          collectBuildInfo: true
          buildName: '$(Build.DefinitionName)'
          buildNumber: '$(Build.BuildNumber)'
          failNoOp: true

                # ,
                # {
                #   "pattern": "$(Build.ArtifactStagingDirectory)/terraform-provider-linux-amd64-signed.zip",
                #   "target": "eng-generic-scratch-local/${{ parameters.artifactUploadTargetFolder }}/terraform-provider-$(Build.SourceBranchName)-$(Build.BuildID)/"
                # },
                # {
                #   "pattern": "$(Build.ArtifactStagingDirectory)/terraform-provider-mac-amd64-signed.zip",
                #   "target": "eng-generic-scratch-local/${{ parameters.artifactUploadTargetFolder }}/terraform-provider-$(Build.SourceBranchName)-$(Build.BuildID)/"
                # }
